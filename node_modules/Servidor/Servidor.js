//Se crea un objeto clientee
var Cliente = require('Cliente');

//Modulo de constantes de teclas
var Servidor = {
	clientes : [],
	socket: null,

	init: function(args, callback) {
		try{
			this.socket = args.socket;
			this.socket.on("connection", this.connect).servidor = this;

			if(typeof callback === "function"){callback()}

			return true;
		}
		catch(err){return "servidor.init: " + err.message}
	},

	connect: function( clienteSocket ) {
		var cliente = new Cliente();

		//Se setea al objeto la información del socket y las acciones asociadas al mismo
		cliente.socket = clienteSocket;
		cliente.servidor = this.servidor;
		
		var clientesIDs = [];
		for(var i in this.servidor.clientes){
			if(this.servidor.clientes[i].socket.disconnected){
				this.servidor.clientes.splice(this.servidor.clientes[i].id,1);
			}else{
				clientesIDs.push(this.servidor.clientes[i].socket.id);
			}
		}

		this.servidor.clientes.push(cliente);

		this.servidor.defineListeners(cliente);

		cliente.servidor.socket.emit("agregarClientes", JSON.stringify([cliente.socket.id]));
		cliente.socket.emit("agregarClientes", JSON.stringify(clientesIDs));

		cliente.socket.on("disconnect", function(){
			var pos = cliente.servidor.clientes.indexOf(cliente);
			var clientesIDs = [];

			for(var i in cliente.servidor.clientes){
				console.log(cliente.servidor.clientes[i].socket.id);
				if(cliente.servidor.clientes[i].socket.disconnected){
					clientesIDs.push(cliente.servidor.clientes[i].socket.id);
					cliente.servidor.clientes.splice(i,1);
				}
			}

			if(pos>-1){
				console.log(pos + " - " + clientesIDs.length);
				cliente.servidor.socket.emit("removerClientes", JSON.stringify(clientesIDs));
			}
		});
	},

	//Función que setea los metodos que se recibiran mediante el socket del clientee
	defineListeners: function(cliente) {
		//Cuando un clientee presiona una tecla y esta está abajo
		cliente.socket.on("keyDown", cliente.evKeyDown).cliente = cliente;
		cliente.socket.on("desconectarCliente", cliente.evDesconectarCliente).cliente = cliente;
	},

	//Función que informa a los demas clientes la acción que realizao el socketId
	notificarClientes: function(socketId, accion){
		this.socket.emit("notificarClientes", JSON.stringify({"socketId": socketId, "accion":accion}));
	}
};

module.exports = Servidor;